---
title: "Untitled"
format: html
engine: jupyter
---


```{python}
import numpy as np # linear algebra
import pandas as pd
import pydicom
import os
import scipy.ndimage
import matplotlib.pyplot as plt

from skimage import measure, morphology
from mpl_toolkits.mplot3d.art3d import Poly3DCollection

def load_scan(path):
    slices = [pydicom.filereader.dcmread(os.path.join(path, s)) for s in os.listdir(path)]
    slices.sort(key=lambda x: float(x.ImagePositionPatient[2]))
    
    try:
        slice_thickness = np.abs(slices[0].ImagePositionPatient[2] - slices[1].ImagePositionPatient[2])
    except AttributeError:
        slice_thickness = np.abs(slices[0].SliceLocation - slices[1].SliceLocation)
        
    for s in slices:
        s.SliceThickness = slice_thickness
        
    return slices

# Some constants 
INPUT_FOLDER = '/Users/benjaminsewell/Documents/R_Projects/Dicom/Data/Chest/dicom/'
patients = os.listdir(INPUT_FOLDER)
patients.sort()

def get_pixels_hu(slices):
    image = np.stack([s.pixel_array for s in slices])
    
    # Ensure the image is of type int16
    image = image.astype(np.int16)

    # Set outside-of-scan pixels to 0, assuming outside pixels are -2000
    image[image == -2000] = 0
    
    # Convert to Hounsfield units (HU)
    for slice_number in range(len(slices)):

        intercept = slices[slice_number].RescaleIntercept
        slope = slices[slice_number].RescaleSlope
        
        if slope != 1:
            image[slice_number] = slope * image[slice_number].astype(np.float64)
        image[slice_number] += np.int16(intercept)
    
    return np.array(image, dtype=np.int16)
  
# Example usage
first_patient = load_scan(os.path.join(INPUT_FOLDER, patients[0]))
first_patient_pixels = get_pixels_hu(first_patient)

# Plot histogram of Hounsfield Units (HU)
plt.hist(first_patient_pixels.flatten(), bins=80, color='c')
plt.xlabel("Hounsfield Units (HU)")
plt.ylabel("Frequency")
plt.show()


mid_slice_index = len(first_patient_pixels) // 2
plt.imshow(first_patient_pixels[mid_slice_index], cmap=plt.cm.gray)
plt.show()



```